# ui_components.py
# This file contains functions for building the UI components of the BACnet Tools GUI.

import tkinter as tk
from tkinter import ttk
from utils import get_network_interfaces
from config import ABOUT_TEXT, TAG_MAP

def setup_menu(app_instance):
    """Creates the main menu bar."""
    menubar = tk.Menu(app_instance)
    file_menu = tk.Menu(menubar, tearoff=0)
    file_menu.add_command(label="Reset to Defaults", command=app_instance.reset_fields_to_defaults)
    file_menu.add_separator()
    file_menu.add_command(label="Exit", command=app_instance.on_closing)
    menubar.add_cascade(label="File", menu=file_menu)
    about_menu = tk.Menu(menubar, tearoff=0)
    about_menu.add_command(label="About...", command=lambda: show_about_dialog(app_instance))
    menubar.add_cascade(label="About", menu=about_menu)
    app_instance.config(menu=menubar)

def show_about_dialog(app_instance):
    """Displays the 'About' window."""
    about_window = tk.Toplevel(app_instance)
    about_window.title("About BACnet Tools GUI")
    about_width, about_height = 400, 400
    label = ttk.Label(about_window, text=ABOUT_TEXT, padding="10", wraplength=about_width - 20, justify=tk.LEFT)
    label.pack(expand=True, fill=tk.BOTH)
    ok_button = ttk.Button(about_window, text="OK", command=about_window.destroy)
    ok_button.pack(pady=10)
    app_instance.update_idletasks()
    x_pos = app_instance.winfo_x() + (app_instance.winfo_width() // 2) - (about_width // 2)
    y_pos = app_instance.winfo_y() + (app_instance.winfo_height() // 2) - (about_height // 2)
    about_window.geometry(f"{about_width}x{about_height}+{x_pos}+{y_pos}")
    about_window.transient(app_instance)
    about_window.grab_set()
    app_instance.wait_window(about_window)

def setup_ip_widgets(app_instance):
    """Creates and places the widgets for the BACnet/IP configuration frame."""
    frame = app_instance.ip_frame
    ttk.Label(frame, text="Device IP:").grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)
    app_instance.ip_address_var = tk.StringVar()
    app_instance.ip_address_cb = ttk.Combobox(frame, textvariable=app_instance.ip_address_var, width=28)
    app_instance.ip_address_cb.grid(row=0, column=1, padx=5, pady=5)
    ttk.Label(frame, text="Instance #:").grid(row=0, column=2, padx=5, pady=5, sticky=tk.W)
    app_instance.instance_number_var = tk.StringVar()
    app_instance.instance_number_cb = ttk.Combobox(frame, textvariable=app_instance.instance_number_var, width=13)
    app_instance.instance_number_cb.grid(row=0, column=3, padx=5, pady=5)
    ttk.Label(frame, text="Interface:").grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)
    app_instance.interface_var = tk.StringVar()
    app_instance.interface_cb = ttk.Combobox(frame, textvariable=app_instance.interface_var, width=40)
    interfaces = get_network_interfaces()
    interfaces.insert(0, "")
    app_instance.interface_cb['values'] = interfaces
    app_instance.interface_cb.grid(row=1, column=1, padx=5, pady=5)
    app_instance.interface_cb.current(1 if len(interfaces) > 1 else 0)
    ttk.Label(frame, text="APDU Timeout (ms):").grid(row=1, column=2, padx=5, pady=5, sticky=tk.W)
    app_instance.apdu_timeout_var = tk.StringVar()
    app_instance.apdu_timeout_cb = ttk.Combobox(frame, textvariable=app_instance.apdu_timeout_var, width=13)
    app_instance.apdu_timeout_cb.grid(row=1, column=3, padx=5, pady=5)
    ttk.Label(frame, text="BBMD IP (for routing):").grid(row=2, column=0, padx=5, pady=5, sticky=tk.W)
    app_instance.bbmd_ip_var = tk.StringVar()
    app_instance.bbmd_ip_cb = ttk.Combobox(frame, textvariable=app_instance.bbmd_ip_var, width=28)
    app_instance.bbmd_ip_cb.grid(row=2, column=1, padx=5, pady=5)
    ttk.Label(frame, text="BACnet IP Network #:").grid(row=2, column=2, padx=5, pady=5, sticky=tk.W)
    app_instance.ip_network_number_var = tk.StringVar()
    app_instance.ip_network_number_cb = ttk.Combobox(frame, textvariable=app_instance.ip_network_number_var, width=13)
    app_instance.ip_network_number_cb.grid(row=2, column=3, padx=5, pady=5)
    ttk.Label(frame, text="BBMD Dst Port:").grid(row=3, column=0, padx=5, pady=5, sticky=tk.W)
    app_instance.ip_port_var = tk.StringVar()
    app_instance.ip_port_cb = ttk.Combobox(frame, textvariable=app_instance.ip_port_var, width=13)
    app_instance.ip_port_cb.grid(row=3, column=1, padx=5, pady=5)
    ttk.Label(frame, text="BBMD TTL (s):").grid(row=3, column=2, padx=5, pady=5, sticky=tk.W)
    app_instance.bbmd_ttl_var = tk.StringVar()
    app_instance.bbmd_ttl_cb = ttk.Combobox(frame, textvariable=app_instance.bbmd_ttl_var, width=13)
    app_instance.bbmd_ttl_cb.grid(row=3, column=3, padx=5, pady=5)

def setup_mstp_widgets(app_instance):
    """Creates and places the widgets for the BACnet MS/TP configuration frame."""
    frame = app_instance.mstp_frame
    app_instance.mstp_mode_var = tk.StringVar(value=app_instance.history.get('last_mstp_mode', 'local'))
    ttk.Radiobutton(frame, text="Local", variable=app_instance.mstp_mode_var, value='local', command=app_instance.toggle_mstp_fields).pack(side=tk.LEFT, padx=10)
    ttk.Radiobutton(frame, text="Remote", variable=app_instance.mstp_mode_var, value='remote', command=app_instance.toggle_mstp_fields).pack(side=tk.LEFT, padx=10)
    app_instance.local_mstp_frame = ttk.Frame(frame)
    app_instance.remote_mstp_frame = ttk.Frame(frame)
    ttk.Label(app_instance.local_mstp_frame, text="COM Port:").grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)
    app_instance.com_port_var = tk.StringVar()
    app_instance.com_port_cb = ttk.Combobox(app_instance.local_mstp_frame, textvariable=app_instance.com_port_var, width=15)
    app_instance.com_port_cb.grid(row=0, column=1, padx=5, pady=5)
    ttk.Label(app_instance.local_mstp_frame, text="Baud Rate:").grid(row=0, column=2, padx=5, pady=5, sticky=tk.W)
    app_instance.baud_rate_var = tk.StringVar()
    app_instance.baud_rate_cb = ttk.Combobox(app_instance.local_mstp_frame, textvariable=app_instance.baud_rate_var, width=15)
    app_instance.baud_rate_cb.grid(row=0, column=3, padx=5, pady=5)
    ttk.Label(app_instance.local_mstp_frame, text="MAC Address (for Ping):").grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)
    app_instance.mac_address_var = tk.StringVar()
    app_instance.mac_address_cb = ttk.Combobox(app_instance.local_mstp_frame, textvariable=app_instance.mac_address_var, width=15)
    app_instance.mac_address_cb.grid(row=1, column=1, padx=5, pady=5)
    ttk.Label(app_instance.local_mstp_frame, text="Instance # (for R/W):").grid(row=1, column=2, padx=5, pady=5, sticky=tk.W)
    app_instance.mstp_instance_var = tk.StringVar()
    app_instance.mstp_instance_cb = ttk.Combobox(app_instance.local_mstp_frame, textvariable=app_instance.mstp_instance_var, width=15)
    app_instance.mstp_instance_cb.grid(row=1, column=3, padx=5, pady=5)
    ttk.Label(app_instance.remote_mstp_frame, text="Network #:").grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)
    app_instance.network_number_var = tk.StringVar()
    app_instance.network_number_cb = ttk.Combobox(app_instance.remote_mstp_frame, textvariable=app_instance.network_number_var, width=15)
    app_instance.network_number_cb.grid(row=0, column=1, padx=5, pady=5)

def setup_actions_widgets(app_instance, actions_frame):
    """Creates and places the widgets for the actions frame."""
    ttk.Label(actions_frame, text="Read Property (objType;inst;prop):").grid(row=0, column=0, columnspan=2, padx=5, pady=5, sticky=tk.W)
    app_instance.read_property_var = tk.StringVar()
    app_instance.read_property_cb = ttk.Combobox(actions_frame, textvariable=app_instance.read_property_var, width=40)
    app_instance.read_property_cb.grid(row=0, column=2, columnspan=2, padx=5, pady=5, sticky=tk.W)
    ttk.Label(actions_frame, text="Write Property (objType;inst;prop):").grid(row=1, column=0, columnspan=2, padx=5, pady=5, sticky=tk.W)
    app_instance.write_property_var = tk.StringVar()
    app_instance.write_property_cb = ttk.Combobox(actions_frame, textvariable=app_instance.write_property_var, width=40)
    app_instance.write_property_cb.grid(row=1, column=2, columnspan=2, padx=5, pady=5, sticky=tk.W)
    ttk.Label(actions_frame, text="Value:").grid(row=2, column=0, padx=5, pady=5, sticky=tk.W)
    app_instance.write_value_var = tk.StringVar()
    app_instance.write_value_cb = ttk.Combobox(actions_frame, textvariable=app_instance.write_value_var, width=15)
    app_instance.write_value_cb.grid(row=2, column=1, padx=5, pady=5, sticky=tk.W)
    ttk.Label(actions_frame, text="Data Type:").grid(row=2, column=2, padx=5, pady=5, sticky=tk.W)
    app_instance.write_tag_var = tk.StringVar()
    app_instance.write_tag_cb = ttk.Combobox(actions_frame, textvariable=app_instance.write_tag_var, width=15, state='readonly')
    app_instance.write_tag_cb['values'] = list(TAG_MAP.keys())
    app_instance.write_tag_cb.grid(row=2, column=3, padx=5, pady=5, sticky=tk.W)
    ttk.Label(actions_frame, text="Priority:").grid(row=2, column=4, padx=5, pady=5, sticky=tk.W)
    app_instance.write_priority_var = tk.StringVar()
    app_instance.write_priority_cb = ttk.Combobox(actions_frame, textvariable=app_instance.write_priority_var, width=10)
    app_instance.write_priority_cb.grid(row=2, column=5, padx=5, pady=5, sticky=tk.W)
    app_instance.ping_button = ttk.Button(actions_frame, text="Ping (Who-Is)", command=app_instance.run_ping)
    app_instance.ping_button.grid(row=3, column=0, padx=5, pady=10)
    app_instance.discover_button = ttk.Button(actions_frame, text="Discover Devices", command=app_instance.run_discover)
    app_instance.discover_button.grid(row=3, column=1, padx=5, pady=10)
    app_instance.discover_objects_button = ttk.Button(actions_frame, text="Discover Objects", command=app_instance.run_discover_objects, state=tk.DISABLED)
    app_instance.discover_objects_button.grid(row=3, column=2, padx=5, pady=10)
    app_instance.read_button = ttk.Button(actions_frame, text="Read Property", command=app_instance.run_read_property)
    app_instance.read_button.grid(row=3, column=3, padx=5, pady=10)
    app_instance.write_button = ttk.Button(actions_frame, text="Write Property", command=app_instance.run_write_property)
    app_instance.write_button.grid(row=3, column=4, padx=5, pady=10)
    app_instance.reset_button = ttk.Button(actions_frame, text="Reset to Defaults", command=app_instance.reset_fields_to_defaults)
    app_instance.reset_button.grid(row=3, column=5, padx=5, pady=10)
    app_instance.stop_button = ttk.Button(actions_frame, text="Stop Command", command=app_instance.stop_current_command, state=tk.DISABLED)
    app_instance.stop_button.grid(row=3, column=6, padx=5, pady=10)

def setup_object_browser(app_instance, parent):
    """Creates and places the widgets for the object browser."""
    browser_pane = ttk.PanedWindow(parent, orient=tk.HORIZONTAL)
    browser_pane.pack(fill=tk.BOTH, expand=True)
    
    devices_frame = ttk.Frame(browser_pane)
    app_instance.device_tree = ttk.Treeview(devices_frame, columns=("IP",), show="headings")
    app_instance.device_tree.heading("#0", text="Instance")
    app_instance.device_tree.heading("IP", text="IP Address")
    app_instance.device_tree.column("#0", width=100)
    app_instance.device_tree.column("IP", width=150)
    app_instance.device_tree.pack(fill=tk.BOTH, expand=True)
    browser_pane.add(devices_frame, weight=1)
    app_instance.device_tree.bind("<<TreeviewSelect>>", app_instance.on_device_select)

    object_panes = ttk.PanedWindow(browser_pane, orient=tk.HORIZONTAL)
    browser_pane.add(object_panes, weight=3)

    tree_frame = ttk.Frame(object_panes)
    app_instance.object_tree = ttk.Treeview(tree_frame, columns=("Instance",), show="tree headings")
    app_instance.object_tree.heading("#0", text="Object Type")
    app_instance.object_tree.heading("Instance", text="Instance")
    app_instance.object_tree.column("#0", width=200)
    app_instance.object_tree.column("Instance", width=100)
    app_instance.object_tree.pack(fill=tk.BOTH, expand=True)
    object_panes.add(tree_frame, weight=1)
    
    props_frame = ttk.Frame(object_panes)
    app_instance.props_tree = ttk.Treeview(props_frame, columns=("Value",), show="headings")
    app_instance.props_tree.heading("#0", text="Property")
    app_instance.props_tree.heading("Value", text="Value")
    app_instance.props_tree.column("#0", width=150)
    app_instance.props_tree.column("Value", width=200)
    app_instance.props_tree.pack(fill=tk.BOTH, expand=True)
    object_panes.add(props_frame, weight=2)
    app_instance.object_tree.bind("<<TreeviewSelect>>", app_instance.on_object_select)
